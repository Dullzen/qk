// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: sistema.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matchmaker_QueuePlayer_FullMethodName      = "/sistema.Matchmaker/QueuePlayer"
	Matchmaker_GetPlayerStatus_FullMethodName  = "/sistema.Matchmaker/GetPlayerStatus"
	Matchmaker_SincronizarReloj_FullMethodName = "/sistema.Matchmaker/SincronizarReloj"
)

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para el matchmaker
type MatchmakerClient interface {
	// Método para unirse a la cola de emparejamiento
	QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error)
	// Método para consultar el estado actual del jugador
	GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error)
	// Método para sincronizar relojes vectoriales (mantener consistencia eventual)
	SincronizarReloj(ctx context.Context, in *SincronizacionRequest, opts ...grpc.CallOption) (*SincronizacionResponse, error)
}

type matchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerClient(cc grpc.ClientConnInterface) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuePlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaker_QueuePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatusResponse)
	err := c.cc.Invoke(ctx, Matchmaker_GetPlayerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) SincronizarReloj(ctx context.Context, in *SincronizacionRequest, opts ...grpc.CallOption) (*SincronizacionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SincronizacionResponse)
	err := c.cc.Invoke(ctx, Matchmaker_SincronizarReloj_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServer is the server API for Matchmaker service.
// All implementations must embed UnimplementedMatchmakerServer
// for forward compatibility.
//
// Servicio para el matchmaker
type MatchmakerServer interface {
	// Método para unirse a la cola de emparejamiento
	QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error)
	// Método para consultar el estado actual del jugador
	GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error)
	// Método para sincronizar relojes vectoriales (mantener consistencia eventual)
	SincronizarReloj(context.Context, *SincronizacionRequest) (*SincronizacionResponse, error)
	mustEmbedUnimplementedMatchmakerServer()
}

// UnimplementedMatchmakerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakerServer struct{}

func (UnimplementedMatchmakerServer) QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePlayer not implemented")
}
func (UnimplementedMatchmakerServer) GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatus not implemented")
}
func (UnimplementedMatchmakerServer) SincronizarReloj(context.Context, *SincronizacionRequest) (*SincronizacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SincronizarReloj not implemented")
}
func (UnimplementedMatchmakerServer) mustEmbedUnimplementedMatchmakerServer() {}
func (UnimplementedMatchmakerServer) testEmbeddedByValue()                    {}

// UnsafeMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServer will
// result in compilation errors.
type UnsafeMatchmakerServer interface {
	mustEmbedUnimplementedMatchmakerServer()
}

func RegisterMatchmakerServer(s grpc.ServiceRegistrar, srv MatchmakerServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matchmaker_ServiceDesc, srv)
}

func _Matchmaker_QueuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).QueuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_QueuePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).QueuePlayer(ctx, req.(*PlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_GetPlayerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).GetPlayerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_GetPlayerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).GetPlayerStatus(ctx, req.(*PlayerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_SincronizarReloj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SincronizacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).SincronizarReloj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_SincronizarReloj_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).SincronizarReloj(ctx, req.(*SincronizacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matchmaker_ServiceDesc is the grpc.ServiceDesc for Matchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sistema.Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueuePlayer",
			Handler:    _Matchmaker_QueuePlayer_Handler,
		},
		{
			MethodName: "GetPlayerStatus",
			Handler:    _Matchmaker_GetPlayerStatus_Handler,
		},
		{
			MethodName: "SincronizarReloj",
			Handler:    _Matchmaker_SincronizarReloj_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sistema.proto",
}

const (
	PartidaService_AssignMatch_FullMethodName          = "/sistema.PartidaService/AssignMatch"
	PartidaService_ObtenerEstadoPartida_FullMethodName = "/sistema.PartidaService/ObtenerEstadoPartida"
)

// PartidaServiceClient is the client API for PartidaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicios que expone el servidor de partidas como servidor gRPC
type PartidaServiceClient interface {
	// Invocado por el Matchmaker para iniciar una partida
	AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error)
	// Otros métodos del servidor de partidas pueden estar aquí
	ObtenerEstadoPartida(ctx context.Context, in *EstadoPartidaRequest, opts ...grpc.CallOption) (*EstadoPartidaResponse, error)
}

type partidaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartidaServiceClient(cc grpc.ClientConnInterface) PartidaServiceClient {
	return &partidaServiceClient{cc}
}

func (c *partidaServiceClient) AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignMatchResponse)
	err := c.cc.Invoke(ctx, PartidaService_AssignMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partidaServiceClient) ObtenerEstadoPartida(ctx context.Context, in *EstadoPartidaRequest, opts ...grpc.CallOption) (*EstadoPartidaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstadoPartidaResponse)
	err := c.cc.Invoke(ctx, PartidaService_ObtenerEstadoPartida_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartidaServiceServer is the server API for PartidaService service.
// All implementations must embed UnimplementedPartidaServiceServer
// for forward compatibility.
//
// Servicios que expone el servidor de partidas como servidor gRPC
type PartidaServiceServer interface {
	// Invocado por el Matchmaker para iniciar una partida
	AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error)
	// Otros métodos del servidor de partidas pueden estar aquí
	ObtenerEstadoPartida(context.Context, *EstadoPartidaRequest) (*EstadoPartidaResponse, error)
	mustEmbedUnimplementedPartidaServiceServer()
}

// UnimplementedPartidaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartidaServiceServer struct{}

func (UnimplementedPartidaServiceServer) AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMatch not implemented")
}
func (UnimplementedPartidaServiceServer) ObtenerEstadoPartida(context.Context, *EstadoPartidaRequest) (*EstadoPartidaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerEstadoPartida not implemented")
}
func (UnimplementedPartidaServiceServer) mustEmbedUnimplementedPartidaServiceServer() {}
func (UnimplementedPartidaServiceServer) testEmbeddedByValue()                        {}

// UnsafePartidaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartidaServiceServer will
// result in compilation errors.
type UnsafePartidaServiceServer interface {
	mustEmbedUnimplementedPartidaServiceServer()
}

func RegisterPartidaServiceServer(s grpc.ServiceRegistrar, srv PartidaServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartidaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartidaService_ServiceDesc, srv)
}

func _PartidaService_AssignMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartidaServiceServer).AssignMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartidaService_AssignMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartidaServiceServer).AssignMatch(ctx, req.(*AssignMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartidaService_ObtenerEstadoPartida_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoPartidaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartidaServiceServer).ObtenerEstadoPartida(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartidaService_ObtenerEstadoPartida_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartidaServiceServer).ObtenerEstadoPartida(ctx, req.(*EstadoPartidaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartidaService_ServiceDesc is the grpc.ServiceDesc for PartidaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartidaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sistema.PartidaService",
	HandlerType: (*PartidaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMatch",
			Handler:    _PartidaService_AssignMatch_Handler,
		},
		{
			MethodName: "ObtenerEstadoPartida",
			Handler:    _PartidaService_ObtenerEstadoPartida_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sistema.proto",
}

const (
	MatchmakerService_UpdateServerStatus_FullMethodName = "/sistema.MatchmakerService/UpdateServerStatus"
	MatchmakerService_NotifyMatchResult_FullMethodName  = "/sistema.MatchmakerService/NotifyMatchResult"
)

// MatchmakerServiceClient is the client API for MatchmakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicios que el Matchmaker expone para el servidor de partidas
type MatchmakerServiceClient interface {
	// Actualizar el estado del servidor de partidas
	UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error)
	// Añadir este método al servicio MatchmakerService
	NotifyMatchResult(ctx context.Context, in *MatchResultNotification, opts ...grpc.CallOption) (*MatchResultResponse, error)
}

type matchmakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerServiceClient(cc grpc.ClientConnInterface) MatchmakerServiceClient {
	return &matchmakerServiceClient{cc}
}

func (c *matchmakerServiceClient) UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStatusUpdateResponse)
	err := c.cc.Invoke(ctx, MatchmakerService_UpdateServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerServiceClient) NotifyMatchResult(ctx context.Context, in *MatchResultNotification, opts ...grpc.CallOption) (*MatchResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchResultResponse)
	err := c.cc.Invoke(ctx, MatchmakerService_NotifyMatchResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServiceServer is the server API for MatchmakerService service.
// All implementations must embed UnimplementedMatchmakerServiceServer
// for forward compatibility.
//
// Servicios que el Matchmaker expone para el servidor de partidas
type MatchmakerServiceServer interface {
	// Actualizar el estado del servidor de partidas
	UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error)
	// Añadir este método al servicio MatchmakerService
	NotifyMatchResult(context.Context, *MatchResultNotification) (*MatchResultResponse, error)
	mustEmbedUnimplementedMatchmakerServiceServer()
}

// UnimplementedMatchmakerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakerServiceServer struct{}

func (UnimplementedMatchmakerServiceServer) UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerStatus not implemented")
}
func (UnimplementedMatchmakerServiceServer) NotifyMatchResult(context.Context, *MatchResultNotification) (*MatchResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMatchResult not implemented")
}
func (UnimplementedMatchmakerServiceServer) mustEmbedUnimplementedMatchmakerServiceServer() {}
func (UnimplementedMatchmakerServiceServer) testEmbeddedByValue()                           {}

// UnsafeMatchmakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServiceServer will
// result in compilation errors.
type UnsafeMatchmakerServiceServer interface {
	mustEmbedUnimplementedMatchmakerServiceServer()
}

func RegisterMatchmakerServiceServer(s grpc.ServiceRegistrar, srv MatchmakerServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchmakerService_ServiceDesc, srv)
}

func _MatchmakerService_UpdateServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServiceServer).UpdateServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakerService_UpdateServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServiceServer).UpdateServerStatus(ctx, req.(*ServerStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakerService_NotifyMatchResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchResultNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServiceServer).NotifyMatchResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakerService_NotifyMatchResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServiceServer).NotifyMatchResult(ctx, req.(*MatchResultNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchmakerService_ServiceDesc is the grpc.ServiceDesc for MatchmakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchmakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sistema.MatchmakerService",
	HandlerType: (*MatchmakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServerStatus",
			Handler:    _MatchmakerService_UpdateServerStatus_Handler,
		},
		{
			MethodName: "NotifyMatchResult",
			Handler:    _MatchmakerService_NotifyMatchResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sistema.proto",
}

const (
	AdminService_AdminGetSystemStatus_FullMethodName   = "/sistema.AdminService/AdminGetSystemStatus"
	AdminService_AdminUpdateServerState_FullMethodName = "/sistema.AdminService/AdminUpdateServerState"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio de administración para el matchmaker
type AdminServiceClient interface {
	// Obtener una vista completa del estado del sistema
	AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	// Modificar el estado de un servidor
	AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminGetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUpdateResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminUpdateServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
//
// Servicio de administración para el matchmaker
type AdminServiceServer interface {
	// Obtener una vista completa del estado del sistema
	AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error)
	// Modificar el estado de un servidor
	AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSystemStatus not implemented")
}
func (UnimplementedAdminServiceServer) AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateServerState not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminGetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminGetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminGetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminGetSystemStatus(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AdminUpdateServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminUpdateServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminUpdateServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminUpdateServerState(ctx, req.(*AdminServerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sistema.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminGetSystemStatus",
			Handler:    _AdminService_AdminGetSystemStatus_Handler,
		},
		{
			MethodName: "AdminUpdateServerState",
			Handler:    _AdminService_AdminUpdateServerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sistema.proto",
}

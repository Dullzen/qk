// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: sistema.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mensaje para solicitar unirse a la cola
type PlayerInfoRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameModePreference string                 `protobuf:"bytes,2,opt,name=game_mode_preference,json=gameModePreference,proto3" json:"game_mode_preference,omitempty"`
	RelojVectorial     map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerInfoRequest) Reset() {
	*x = PlayerInfoRequest{}
	mi := &file_sistema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoRequest) ProtoMessage() {}

func (x *PlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*PlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInfoRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerInfoRequest) GetGameModePreference() string {
	if x != nil {
		return x.GameModePreference
	}
	return ""
}

func (x *PlayerInfoRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Mensaje de respuesta al unirse a cola
type QueuePlayerResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StatusCode     int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0 = éxito, otro valor = fallo
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	PartidaId      string                 `protobuf:"bytes,4,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`                                                                                           // ID de la partida asignada
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueuePlayerResponse) Reset() {
	*x = QueuePlayerResponse{}
	mi := &file_sistema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerResponse) ProtoMessage() {}

func (x *QueuePlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerResponse.ProtoReflect.Descriptor instead.
func (*QueuePlayerResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{1}
}

func (x *QueuePlayerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueuePlayerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueuePlayerResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *QueuePlayerResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

// Mensaje para solicitar estado del jugador
type PlayerStatusRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PlayerId       string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerStatusRequest) Reset() {
	*x = PlayerStatusRequest{}
	mi := &file_sistema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRequest) ProtoMessage() {}

func (x *PlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerStatusRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerStatusRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Mensaje de respuesta con estado del jugador
type PlayerStatusResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PlayerStatus   string                 `protobuf:"bytes,1,opt,name=player_status,json=playerStatus,proto3" json:"player_status,omitempty"`                                                                                  // "IDLE", "IN_QUEUE", "IN_MATCH", "MATCH_COMPLETED"
	PartidaId      string                 `protobuf:"bytes,2,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`                                                                                           // ID de la partida si está en una
	Partidas       []*Partida             `protobuf:"bytes,3,rep,name=partidas,proto3" json:"partidas,omitempty"`                                                                                                              // Lista de partidas (para consultas de estado)
	RelojVectorial map[string]int32       `protobuf:"bytes,4,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Incluir reloj vectorial
	Mensaje        string                 `protobuf:"bytes,5,opt,name=mensaje,proto3" json:"mensaje,omitempty"`                                                                                                                // Mensaje informativo adicional
	Ganador        string                 `protobuf:"bytes,6,opt,name=ganador,proto3" json:"ganador,omitempty"`                                                                                                                // Si ha ganado
	Perdedor       string                 `protobuf:"bytes,7,opt,name=perdedor,proto3" json:"perdedor,omitempty"`                                                                                                              // Si ha perdido
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerStatusResponse) Reset() {
	*x = PlayerStatusResponse{}
	mi := &file_sistema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusResponse) ProtoMessage() {}

func (x *PlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStatusResponse) GetPlayerStatus() string {
	if x != nil {
		return x.PlayerStatus
	}
	return ""
}

func (x *PlayerStatusResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

func (x *PlayerStatusResponse) GetPartidas() []*Partida {
	if x != nil {
		return x.Partidas
	}
	return nil
}

func (x *PlayerStatusResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *PlayerStatusResponse) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *PlayerStatusResponse) GetGanador() string {
	if x != nil {
		return x.Ganador
	}
	return ""
}

func (x *PlayerStatusResponse) GetPerdedor() string {
	if x != nil {
		return x.Perdedor
	}
	return ""
}

// Mensaje para sincronización de relojes
type SincronizacionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IdCliente      string                 `protobuf:"bytes,1,opt,name=id_cliente,json=idCliente,proto3" json:"id_cliente,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SincronizacionRequest) Reset() {
	*x = SincronizacionRequest{}
	mi := &file_sistema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SincronizacionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SincronizacionRequest) ProtoMessage() {}

func (x *SincronizacionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SincronizacionRequest.ProtoReflect.Descriptor instead.
func (*SincronizacionRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{4}
}

func (x *SincronizacionRequest) GetIdCliente() string {
	if x != nil {
		return x.IdCliente
	}
	return ""
}

func (x *SincronizacionRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta de sincronización
type SincronizacionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RelojVectorial map[string]int32       `protobuf:"bytes,1,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Exito          bool                   `protobuf:"varint,2,opt,name=exito,proto3" json:"exito,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SincronizacionResponse) Reset() {
	*x = SincronizacionResponse{}
	mi := &file_sistema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SincronizacionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SincronizacionResponse) ProtoMessage() {}

func (x *SincronizacionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SincronizacionResponse.ProtoReflect.Descriptor instead.
func (*SincronizacionResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{5}
}

func (x *SincronizacionResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *SincronizacionResponse) GetExito() bool {
	if x != nil {
		return x.Exito
	}
	return false
}

// Mensaje para representar una partida
type Partida struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Clientes      []string               `protobuf:"bytes,2,rep,name=clientes,proto3" json:"clientes,omitempty"`
	Llena         bool                   `protobuf:"varint,3,opt,name=llena,proto3" json:"llena,omitempty"`
	Estado        string                 `protobuf:"bytes,4,opt,name=estado,proto3" json:"estado,omitempty"`                           // Estado de la partida (Esperando, En curso, Finalizada)
	Ganador       string                 `protobuf:"bytes,5,opt,name=ganador,proto3" json:"ganador,omitempty"`                         // Ganador de la partida (si está finalizada)
	Perdedor      string                 `protobuf:"bytes,6,opt,name=perdedor,proto3" json:"perdedor,omitempty"`                       // Perdedor de la partida (si está finalizada)
	ServidorId    string                 `protobuf:"bytes,7,opt,name=servidor_id,json=servidorId,proto3" json:"servidor_id,omitempty"` // Añadir campo para el ID del servidor
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Partida) Reset() {
	*x = Partida{}
	mi := &file_sistema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partida) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partida) ProtoMessage() {}

func (x *Partida) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partida.ProtoReflect.Descriptor instead.
func (*Partida) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{6}
}

func (x *Partida) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Partida) GetClientes() []string {
	if x != nil {
		return x.Clientes
	}
	return nil
}

func (x *Partida) GetLlena() bool {
	if x != nil {
		return x.Llena
	}
	return false
}

func (x *Partida) GetEstado() string {
	if x != nil {
		return x.Estado
	}
	return ""
}

func (x *Partida) GetGanador() string {
	if x != nil {
		return x.Ganador
	}
	return ""
}

func (x *Partida) GetPerdedor() string {
	if x != nil {
		return x.Perdedor
	}
	return ""
}

func (x *Partida) GetServidorId() string {
	if x != nil {
		return x.ServidorId
	}
	return ""
}

// Añade estas definiciones a sistema.proto para mantener compatibilidad
type ConexionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mensaje        string                 `protobuf:"bytes,1,opt,name=mensaje,proto3" json:"mensaje,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConexionRequest) Reset() {
	*x = ConexionRequest{}
	mi := &file_sistema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConexionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConexionRequest) ProtoMessage() {}

func (x *ConexionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConexionRequest.ProtoReflect.Descriptor instead.
func (*ConexionRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{7}
}

func (x *ConexionRequest) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *ConexionRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

type ConexionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mensaje        string                 `protobuf:"bytes,1,opt,name=mensaje,proto3" json:"mensaje,omitempty"`
	Exito          bool                   `protobuf:"varint,2,opt,name=exito,proto3" json:"exito,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Partidas       []*Partida             `protobuf:"bytes,4,rep,name=partidas,proto3" json:"partidas,omitempty"`
	PartidaId      string                 `protobuf:"bytes,5,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConexionResponse) Reset() {
	*x = ConexionResponse{}
	mi := &file_sistema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConexionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConexionResponse) ProtoMessage() {}

func (x *ConexionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConexionResponse.ProtoReflect.Descriptor instead.
func (*ConexionResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{8}
}

func (x *ConexionResponse) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *ConexionResponse) GetExito() bool {
	if x != nil {
		return x.Exito
	}
	return false
}

func (x *ConexionResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *ConexionResponse) GetPartidas() []*Partida {
	if x != nil {
		return x.Partidas
	}
	return nil
}

func (x *ConexionResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

// Solicitud para asignar una partida
type AssignMatchRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MatchId        string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PlayerIds      []string               `protobuf:"bytes,2,rep,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AssignMatchRequest) Reset() {
	*x = AssignMatchRequest{}
	mi := &file_sistema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchRequest) ProtoMessage() {}

func (x *AssignMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchRequest.ProtoReflect.Descriptor instead.
func (*AssignMatchRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{9}
}

func (x *AssignMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *AssignMatchRequest) GetPlayerIds() []string {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *AssignMatchRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta a la asignación de partida
type AssignMatchResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StatusCode     int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0 = éxito, otro valor = fallo
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AssignMatchResponse) Reset() {
	*x = AssignMatchResponse{}
	mi := &file_sistema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchResponse) ProtoMessage() {}

func (x *AssignMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchResponse.ProtoReflect.Descriptor instead.
func (*AssignMatchResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{10}
}

func (x *AssignMatchResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AssignMatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AssignMatchResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

type EstadoPartidaRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PartidaId      string                 `protobuf:"bytes,1,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EstadoPartidaRequest) Reset() {
	*x = EstadoPartidaRequest{}
	mi := &file_sistema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstadoPartidaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstadoPartidaRequest) ProtoMessage() {}

func (x *EstadoPartidaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstadoPartidaRequest.ProtoReflect.Descriptor instead.
func (*EstadoPartidaRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{11}
}

func (x *EstadoPartidaRequest) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

func (x *EstadoPartidaRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

type EstadoPartidaResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Encontrada     bool                   `protobuf:"varint,1,opt,name=encontrada,proto3" json:"encontrada,omitempty"`
	PartidaId      string                 `protobuf:"bytes,2,opt,name=partida_id,json=partidaId,proto3" json:"partida_id,omitempty"`
	Jugador1       string                 `protobuf:"bytes,3,opt,name=jugador1,proto3" json:"jugador1,omitempty"`
	Jugador2       string                 `protobuf:"bytes,4,opt,name=jugador2,proto3" json:"jugador2,omitempty"`
	Estado         string                 `protobuf:"bytes,5,opt,name=estado,proto3" json:"estado,omitempty"`
	Ganador        string                 `protobuf:"bytes,6,opt,name=ganador,proto3" json:"ganador,omitempty"`
	Mensaje        string                 `protobuf:"bytes,7,opt,name=mensaje,proto3" json:"mensaje,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,8,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EstadoPartidaResponse) Reset() {
	*x = EstadoPartidaResponse{}
	mi := &file_sistema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstadoPartidaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstadoPartidaResponse) ProtoMessage() {}

func (x *EstadoPartidaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstadoPartidaResponse.ProtoReflect.Descriptor instead.
func (*EstadoPartidaResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{12}
}

func (x *EstadoPartidaResponse) GetEncontrada() bool {
	if x != nil {
		return x.Encontrada
	}
	return false
}

func (x *EstadoPartidaResponse) GetPartidaId() string {
	if x != nil {
		return x.PartidaId
	}
	return ""
}

func (x *EstadoPartidaResponse) GetJugador1() string {
	if x != nil {
		return x.Jugador1
	}
	return ""
}

func (x *EstadoPartidaResponse) GetJugador2() string {
	if x != nil {
		return x.Jugador2
	}
	return ""
}

func (x *EstadoPartidaResponse) GetEstado() string {
	if x != nil {
		return x.Estado
	}
	return ""
}

func (x *EstadoPartidaResponse) GetGanador() string {
	if x != nil {
		return x.Ganador
	}
	return ""
}

func (x *EstadoPartidaResponse) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

func (x *EstadoPartidaResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Solicitud para actualizar el estado del servidor
type ServerStatusUpdateRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServerId       string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`   // "DISPONIBLE", "OCUPADO", "CAIDO"
	Address        string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // IP:puerto del servidor de partidas
	RelojVectorial map[string]int32       `protobuf:"bytes,4,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServerStatusUpdateRequest) Reset() {
	*x = ServerStatusUpdateRequest{}
	mi := &file_sistema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateRequest) ProtoMessage() {}

func (x *ServerStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{13}
}

func (x *ServerStatusUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta a la actualización de estado
type ServerStatusUpdateResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StatusCode     int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0 = éxito, otro valor = fallo
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServerStatusUpdateResponse) Reset() {
	*x = ServerStatusUpdateResponse{}
	mi := &file_sistema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateResponse) ProtoMessage() {}

func (x *ServerStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{14}
}

func (x *ServerStatusUpdateResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ServerStatusUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServerStatusUpdateResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Notificación del resultado de una partida
type MatchResultNotification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MatchId        string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	WinnerId       string                 `protobuf:"bytes,2,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`
	LoserId        string                 `protobuf:"bytes,3,opt,name=loser_id,json=loserId,proto3" json:"loser_id,omitempty"`
	ServerId       string                 `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,5,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MatchResultNotification) Reset() {
	*x = MatchResultNotification{}
	mi := &file_sistema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchResultNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultNotification) ProtoMessage() {}

func (x *MatchResultNotification) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultNotification.ProtoReflect.Descriptor instead.
func (*MatchResultNotification) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{15}
}

func (x *MatchResultNotification) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchResultNotification) GetWinnerId() string {
	if x != nil {
		return x.WinnerId
	}
	return ""
}

func (x *MatchResultNotification) GetLoserId() string {
	if x != nil {
		return x.LoserId
	}
	return ""
}

func (x *MatchResultNotification) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *MatchResultNotification) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta a la notificación del resultado
type MatchResultResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StatusCode     int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 0 = éxito, otro valor = fallo
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MatchResultResponse) Reset() {
	*x = MatchResultResponse{}
	mi := &file_sistema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultResponse) ProtoMessage() {}

func (x *MatchResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultResponse.ProtoReflect.Descriptor instead.
func (*MatchResultResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{16}
}

func (x *MatchResultResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *MatchResultResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MatchResultResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Solicitud del administrador
type AdminRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AdminId        string                 `protobuf:"bytes,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,2,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AdminRequest) Reset() {
	*x = AdminRequest{}
	mi := &file_sistema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRequest) ProtoMessage() {}

func (x *AdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRequest.ProtoReflect.Descriptor instead.
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{17}
}

func (x *AdminRequest) GetAdminId() string {
	if x != nil {
		return x.AdminId
	}
	return ""
}

func (x *AdminRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta con el estado completo del sistema
type SystemStatusResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Servers        []*ServerStatus        `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	QueuePlayers   []*QueueInfo           `protobuf:"bytes,2,rep,name=queue_players,json=queuePlayers,proto3" json:"queue_players,omitempty"`
	ActiveGames    []*Partida             `protobuf:"bytes,3,rep,name=active_games,json=activeGames,proto3" json:"active_games,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,4,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StatusCode     int32                  `protobuf:"varint,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message        string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SystemStatusResponse) Reset() {
	*x = SystemStatusResponse{}
	mi := &file_sistema_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse) ProtoMessage() {}

func (x *SystemStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{18}
}

func (x *SystemStatusResponse) GetServers() []*ServerStatus {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *SystemStatusResponse) GetQueuePlayers() []*QueueInfo {
	if x != nil {
		return x.QueuePlayers
	}
	return nil
}

func (x *SystemStatusResponse) GetActiveGames() []*Partida {
	if x != nil {
		return x.ActiveGames
	}
	return nil
}

func (x *SystemStatusResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

func (x *SystemStatusResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *SystemStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Información de un servidor
type ServerStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	LastUpdate    int64                  `protobuf:"varint,4,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"` // timestamp de última actualización
	ActiveMatchId string                 `protobuf:"bytes,5,opt,name=active_match_id,json=activeMatchId,proto3" json:"active_match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatus) Reset() {
	*x = ServerStatus{}
	mi := &file_sistema_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus) ProtoMessage() {}

func (x *ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus.ProtoReflect.Descriptor instead.
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{19}
}

func (x *ServerStatus) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServerStatus) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerStatus) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ServerStatus) GetActiveMatchId() string {
	if x != nil {
		return x.ActiveMatchId
	}
	return ""
}

// Información de un jugador en cola
type QueueInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	JoinTime      int64                  `protobuf:"varint,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"` // timestamp de unión a la cola
	Position      int32                  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`                 // posición en la cola
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	mi := &file_sistema_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{20}
}

func (x *QueueInfo) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *QueueInfo) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *QueueInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// Solicitud para actualizar el estado de un servidor
type AdminServerUpdateRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AdminId        string                 `protobuf:"bytes,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	ServerId       string                 `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NewStatus      string                 `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"` // "DISPONIBLE", "OCUPADO", "CAIDO", "RESET"
	RelojVectorial map[string]int32       `protobuf:"bytes,4,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AdminServerUpdateRequest) Reset() {
	*x = AdminServerUpdateRequest{}
	mi := &file_sistema_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminServerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServerUpdateRequest) ProtoMessage() {}

func (x *AdminServerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServerUpdateRequest.ProtoReflect.Descriptor instead.
func (*AdminServerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{21}
}

func (x *AdminServerUpdateRequest) GetAdminId() string {
	if x != nil {
		return x.AdminId
	}
	return ""
}

func (x *AdminServerUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AdminServerUpdateRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *AdminServerUpdateRequest) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

// Respuesta a la solicitud de actualización
type AdminUpdateResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StatusCode     int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RelojVectorial map[string]int32       `protobuf:"bytes,3,rep,name=reloj_vectorial,json=relojVectorial,proto3" json:"reloj_vectorial,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AdminUpdateResponse) Reset() {
	*x = AdminUpdateResponse{}
	mi := &file_sistema_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateResponse) ProtoMessage() {}

func (x *AdminUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sistema_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateResponse) Descriptor() ([]byte, []int) {
	return file_sistema_proto_rawDescGZIP(), []int{22}
}

func (x *AdminUpdateResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AdminUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AdminUpdateResponse) GetRelojVectorial() map[string]int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

var File_sistema_proto protoreflect.FileDescriptor

const file_sistema_proto_rawDesc = "" +
	"\n" +
	"\rsistema.proto\x12\asistema\"\xfe\x01\n" +
	"\x11PlayerInfoRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x120\n" +
	"\x14game_mode_preference\x18\x02 \x01(\tR\x12gameModePreference\x12W\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v2..sistema.PlayerInfoRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8d\x02\n" +
	"\x13QueuePlayerResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12Y\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v20.sistema.QueuePlayerResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x04 \x01(\tR\tpartidaId\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd0\x01\n" +
	"\x13PlayerStatusRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12Y\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v20.sistema.PlayerStatusRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xf7\x02\n" +
	"\x14PlayerStatusResponse\x12#\n" +
	"\rplayer_status\x18\x01 \x01(\tR\fplayerStatus\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x02 \x01(\tR\tpartidaId\x12,\n" +
	"\bpartidas\x18\x03 \x03(\v2\x10.sistema.PartidaR\bpartidas\x12Z\n" +
	"\x0freloj_vectorial\x18\x04 \x03(\v21.sistema.PlayerStatusResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x18\n" +
	"\amensaje\x18\x05 \x01(\tR\amensaje\x12\x18\n" +
	"\aganador\x18\x06 \x01(\tR\aganador\x12\x1a\n" +
	"\bperdedor\x18\a \x01(\tR\bperdedor\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd6\x01\n" +
	"\x15SincronizacionRequest\x12\x1d\n" +
	"\n" +
	"id_cliente\x18\x01 \x01(\tR\tidCliente\x12[\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v22.sistema.SincronizacionRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xcf\x01\n" +
	"\x16SincronizacionResponse\x12\\\n" +
	"\x0freloj_vectorial\x18\x01 \x03(\v23.sistema.SincronizacionResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x14\n" +
	"\x05exito\x18\x02 \x01(\bR\x05exito\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xba\x01\n" +
	"\aPartida\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bclientes\x18\x02 \x03(\tR\bclientes\x12\x14\n" +
	"\x05llena\x18\x03 \x01(\bR\x05llena\x12\x16\n" +
	"\x06estado\x18\x04 \x01(\tR\x06estado\x12\x18\n" +
	"\aganador\x18\x05 \x01(\tR\aganador\x12\x1a\n" +
	"\bperdedor\x18\x06 \x01(\tR\bperdedor\x12\x1f\n" +
	"\vservidor_id\x18\a \x01(\tR\n" +
	"servidorId\"\xc5\x01\n" +
	"\x0fConexionRequest\x12\x18\n" +
	"\amensaje\x18\x01 \x01(\tR\amensaje\x12U\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v2,.sistema.ConexionRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xaa\x02\n" +
	"\x10ConexionResponse\x12\x18\n" +
	"\amensaje\x18\x01 \x01(\tR\amensaje\x12\x14\n" +
	"\x05exito\x18\x02 \x01(\bR\x05exito\x12V\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v2-.sistema.ConexionResponse.RelojVectorialEntryR\x0erelojVectorial\x12,\n" +
	"\bpartidas\x18\x04 \x03(\v2\x10.sistema.PartidaR\bpartidas\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x05 \x01(\tR\tpartidaId\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xeb\x01\n" +
	"\x12AssignMatchRequest\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12\x1d\n" +
	"\n" +
	"player_ids\x18\x02 \x03(\tR\tplayerIds\x12X\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v2/.sistema.AssignMatchRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xee\x01\n" +
	"\x13AssignMatchResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12Y\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v20.sistema.AssignMatchResponse.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd4\x01\n" +
	"\x14EstadoPartidaRequest\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x01 \x01(\tR\tpartidaId\x12Z\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v21.sistema.EstadoPartidaRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xfa\x02\n" +
	"\x15EstadoPartidaResponse\x12\x1e\n" +
	"\n" +
	"encontrada\x18\x01 \x01(\bR\n" +
	"encontrada\x12\x1d\n" +
	"\n" +
	"partida_id\x18\x02 \x01(\tR\tpartidaId\x12\x1a\n" +
	"\bjugador1\x18\x03 \x01(\tR\bjugador1\x12\x1a\n" +
	"\bjugador2\x18\x04 \x01(\tR\bjugador2\x12\x16\n" +
	"\x06estado\x18\x05 \x01(\tR\x06estado\x12\x18\n" +
	"\aganador\x18\x06 \x01(\tR\aganador\x12\x18\n" +
	"\amensaje\x18\a \x01(\tR\amensaje\x12[\n" +
	"\x0freloj_vectorial\x18\b \x03(\v22.sistema.EstadoPartidaResponse.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8e\x02\n" +
	"\x19ServerStatusUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12_\n" +
	"\x0freloj_vectorial\x18\x04 \x03(\v26.sistema.ServerStatusUpdateRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xfc\x01\n" +
	"\x1aServerStatusUpdateResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12`\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v27.sistema.ServerStatusUpdateResponse.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xab\x02\n" +
	"\x17MatchResultNotification\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12\x1b\n" +
	"\twinner_id\x18\x02 \x01(\tR\bwinnerId\x12\x19\n" +
	"\bloser_id\x18\x03 \x01(\tR\aloserId\x12\x1b\n" +
	"\tserver_id\x18\x04 \x01(\tR\bserverId\x12]\n" +
	"\x0freloj_vectorial\x18\x05 \x03(\v24.sistema.MatchResultNotification.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xee\x01\n" +
	"\x13MatchResultResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12Y\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v20.sistema.MatchResultResponse.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xc0\x01\n" +
	"\fAdminRequest\x12\x19\n" +
	"\badmin_id\x18\x01 \x01(\tR\aadminId\x12R\n" +
	"\x0freloj_vectorial\x18\x02 \x03(\v2).sistema.AdminRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8f\x03\n" +
	"\x14SystemStatusResponse\x12/\n" +
	"\aservers\x18\x01 \x03(\v2\x15.sistema.ServerStatusR\aservers\x127\n" +
	"\rqueue_players\x18\x02 \x03(\v2\x12.sistema.QueueInfoR\fqueuePlayers\x123\n" +
	"\factive_games\x18\x03 \x03(\v2\x10.sistema.PartidaR\vactiveGames\x12Z\n" +
	"\x0freloj_vectorial\x18\x04 \x03(\v21.sistema.SystemStatusResponse.RelojVectorialEntryR\x0erelojVectorial\x12\x1f\n" +
	"\vstatus_code\x18\x05 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa6\x01\n" +
	"\fServerStatus\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x1f\n" +
	"\vlast_update\x18\x04 \x01(\x03R\n" +
	"lastUpdate\x12&\n" +
	"\x0factive_match_id\x18\x05 \x01(\tR\ractiveMatchId\"a\n" +
	"\tQueueInfo\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x1b\n" +
	"\tjoin_time\x18\x02 \x01(\x03R\bjoinTime\x12\x1a\n" +
	"\bposition\x18\x03 \x01(\x05R\bposition\"\x94\x02\n" +
	"\x18AdminServerUpdateRequest\x12\x19\n" +
	"\badmin_id\x18\x01 \x01(\tR\aadminId\x12\x1b\n" +
	"\tserver_id\x18\x02 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x03 \x01(\tR\tnewStatus\x12^\n" +
	"\x0freloj_vectorial\x18\x04 \x03(\v25.sistema.AdminServerUpdateRequest.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xee\x01\n" +
	"\x13AdminUpdateResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12Y\n" +
	"\x0freloj_vectorial\x18\x03 \x03(\v20.sistema.AdminUpdateResponse.RelojVectorialEntryR\x0erelojVectorial\x1aA\n" +
	"\x13RelojVectorialEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x012\x80\x02\n" +
	"\n" +
	"Matchmaker\x12I\n" +
	"\vQueuePlayer\x12\x1a.sistema.PlayerInfoRequest\x1a\x1c.sistema.QueuePlayerResponse\"\x00\x12P\n" +
	"\x0fGetPlayerStatus\x12\x1c.sistema.PlayerStatusRequest\x1a\x1d.sistema.PlayerStatusResponse\"\x00\x12U\n" +
	"\x10SincronizarReloj\x12\x1e.sistema.SincronizacionRequest\x1a\x1f.sistema.SincronizacionResponse\"\x002\xb5\x01\n" +
	"\x0ePartidaService\x12J\n" +
	"\vAssignMatch\x12\x1b.sistema.AssignMatchRequest\x1a\x1c.sistema.AssignMatchResponse\"\x00\x12W\n" +
	"\x14ObtenerEstadoPartida\x12\x1d.sistema.EstadoPartidaRequest\x1a\x1e.sistema.EstadoPartidaResponse\"\x002\xcb\x01\n" +
	"\x11MatchmakerService\x12_\n" +
	"\x12UpdateServerStatus\x12\".sistema.ServerStatusUpdateRequest\x1a#.sistema.ServerStatusUpdateResponse\"\x00\x12U\n" +
	"\x11NotifyMatchResult\x12 .sistema.MatchResultNotification\x1a\x1c.sistema.MatchResultResponse\"\x002\xbb\x01\n" +
	"\fAdminService\x12N\n" +
	"\x14AdminGetSystemStatus\x12\x15.sistema.AdminRequest\x1a\x1d.sistema.SystemStatusResponse\"\x00\x12[\n" +
	"\x16AdminUpdateServerState\x12!.sistema.AdminServerUpdateRequest\x1a\x1c.sistema.AdminUpdateResponse\"\x00B\x13Z\x11grpc-server/protob\x06proto3"

var (
	file_sistema_proto_rawDescOnce sync.Once
	file_sistema_proto_rawDescData []byte
)

func file_sistema_proto_rawDescGZIP() []byte {
	file_sistema_proto_rawDescOnce.Do(func() {
		file_sistema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sistema_proto_rawDesc), len(file_sistema_proto_rawDesc)))
	})
	return file_sistema_proto_rawDescData
}

var file_sistema_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_sistema_proto_goTypes = []any{
	(*PlayerInfoRequest)(nil),          // 0: sistema.PlayerInfoRequest
	(*QueuePlayerResponse)(nil),        // 1: sistema.QueuePlayerResponse
	(*PlayerStatusRequest)(nil),        // 2: sistema.PlayerStatusRequest
	(*PlayerStatusResponse)(nil),       // 3: sistema.PlayerStatusResponse
	(*SincronizacionRequest)(nil),      // 4: sistema.SincronizacionRequest
	(*SincronizacionResponse)(nil),     // 5: sistema.SincronizacionResponse
	(*Partida)(nil),                    // 6: sistema.Partida
	(*ConexionRequest)(nil),            // 7: sistema.ConexionRequest
	(*ConexionResponse)(nil),           // 8: sistema.ConexionResponse
	(*AssignMatchRequest)(nil),         // 9: sistema.AssignMatchRequest
	(*AssignMatchResponse)(nil),        // 10: sistema.AssignMatchResponse
	(*EstadoPartidaRequest)(nil),       // 11: sistema.EstadoPartidaRequest
	(*EstadoPartidaResponse)(nil),      // 12: sistema.EstadoPartidaResponse
	(*ServerStatusUpdateRequest)(nil),  // 13: sistema.ServerStatusUpdateRequest
	(*ServerStatusUpdateResponse)(nil), // 14: sistema.ServerStatusUpdateResponse
	(*MatchResultNotification)(nil),    // 15: sistema.MatchResultNotification
	(*MatchResultResponse)(nil),        // 16: sistema.MatchResultResponse
	(*AdminRequest)(nil),               // 17: sistema.AdminRequest
	(*SystemStatusResponse)(nil),       // 18: sistema.SystemStatusResponse
	(*ServerStatus)(nil),               // 19: sistema.ServerStatus
	(*QueueInfo)(nil),                  // 20: sistema.QueueInfo
	(*AdminServerUpdateRequest)(nil),   // 21: sistema.AdminServerUpdateRequest
	(*AdminUpdateResponse)(nil),        // 22: sistema.AdminUpdateResponse
	nil,                                // 23: sistema.PlayerInfoRequest.RelojVectorialEntry
	nil,                                // 24: sistema.QueuePlayerResponse.RelojVectorialEntry
	nil,                                // 25: sistema.PlayerStatusRequest.RelojVectorialEntry
	nil,                                // 26: sistema.PlayerStatusResponse.RelojVectorialEntry
	nil,                                // 27: sistema.SincronizacionRequest.RelojVectorialEntry
	nil,                                // 28: sistema.SincronizacionResponse.RelojVectorialEntry
	nil,                                // 29: sistema.ConexionRequest.RelojVectorialEntry
	nil,                                // 30: sistema.ConexionResponse.RelojVectorialEntry
	nil,                                // 31: sistema.AssignMatchRequest.RelojVectorialEntry
	nil,                                // 32: sistema.AssignMatchResponse.RelojVectorialEntry
	nil,                                // 33: sistema.EstadoPartidaRequest.RelojVectorialEntry
	nil,                                // 34: sistema.EstadoPartidaResponse.RelojVectorialEntry
	nil,                                // 35: sistema.ServerStatusUpdateRequest.RelojVectorialEntry
	nil,                                // 36: sistema.ServerStatusUpdateResponse.RelojVectorialEntry
	nil,                                // 37: sistema.MatchResultNotification.RelojVectorialEntry
	nil,                                // 38: sistema.MatchResultResponse.RelojVectorialEntry
	nil,                                // 39: sistema.AdminRequest.RelojVectorialEntry
	nil,                                // 40: sistema.SystemStatusResponse.RelojVectorialEntry
	nil,                                // 41: sistema.AdminServerUpdateRequest.RelojVectorialEntry
	nil,                                // 42: sistema.AdminUpdateResponse.RelojVectorialEntry
}
var file_sistema_proto_depIdxs = []int32{
	23, // 0: sistema.PlayerInfoRequest.reloj_vectorial:type_name -> sistema.PlayerInfoRequest.RelojVectorialEntry
	24, // 1: sistema.QueuePlayerResponse.reloj_vectorial:type_name -> sistema.QueuePlayerResponse.RelojVectorialEntry
	25, // 2: sistema.PlayerStatusRequest.reloj_vectorial:type_name -> sistema.PlayerStatusRequest.RelojVectorialEntry
	6,  // 3: sistema.PlayerStatusResponse.partidas:type_name -> sistema.Partida
	26, // 4: sistema.PlayerStatusResponse.reloj_vectorial:type_name -> sistema.PlayerStatusResponse.RelojVectorialEntry
	27, // 5: sistema.SincronizacionRequest.reloj_vectorial:type_name -> sistema.SincronizacionRequest.RelojVectorialEntry
	28, // 6: sistema.SincronizacionResponse.reloj_vectorial:type_name -> sistema.SincronizacionResponse.RelojVectorialEntry
	29, // 7: sistema.ConexionRequest.reloj_vectorial:type_name -> sistema.ConexionRequest.RelojVectorialEntry
	30, // 8: sistema.ConexionResponse.reloj_vectorial:type_name -> sistema.ConexionResponse.RelojVectorialEntry
	6,  // 9: sistema.ConexionResponse.partidas:type_name -> sistema.Partida
	31, // 10: sistema.AssignMatchRequest.reloj_vectorial:type_name -> sistema.AssignMatchRequest.RelojVectorialEntry
	32, // 11: sistema.AssignMatchResponse.reloj_vectorial:type_name -> sistema.AssignMatchResponse.RelojVectorialEntry
	33, // 12: sistema.EstadoPartidaRequest.reloj_vectorial:type_name -> sistema.EstadoPartidaRequest.RelojVectorialEntry
	34, // 13: sistema.EstadoPartidaResponse.reloj_vectorial:type_name -> sistema.EstadoPartidaResponse.RelojVectorialEntry
	35, // 14: sistema.ServerStatusUpdateRequest.reloj_vectorial:type_name -> sistema.ServerStatusUpdateRequest.RelojVectorialEntry
	36, // 15: sistema.ServerStatusUpdateResponse.reloj_vectorial:type_name -> sistema.ServerStatusUpdateResponse.RelojVectorialEntry
	37, // 16: sistema.MatchResultNotification.reloj_vectorial:type_name -> sistema.MatchResultNotification.RelojVectorialEntry
	38, // 17: sistema.MatchResultResponse.reloj_vectorial:type_name -> sistema.MatchResultResponse.RelojVectorialEntry
	39, // 18: sistema.AdminRequest.reloj_vectorial:type_name -> sistema.AdminRequest.RelojVectorialEntry
	19, // 19: sistema.SystemStatusResponse.servers:type_name -> sistema.ServerStatus
	20, // 20: sistema.SystemStatusResponse.queue_players:type_name -> sistema.QueueInfo
	6,  // 21: sistema.SystemStatusResponse.active_games:type_name -> sistema.Partida
	40, // 22: sistema.SystemStatusResponse.reloj_vectorial:type_name -> sistema.SystemStatusResponse.RelojVectorialEntry
	41, // 23: sistema.AdminServerUpdateRequest.reloj_vectorial:type_name -> sistema.AdminServerUpdateRequest.RelojVectorialEntry
	42, // 24: sistema.AdminUpdateResponse.reloj_vectorial:type_name -> sistema.AdminUpdateResponse.RelojVectorialEntry
	0,  // 25: sistema.Matchmaker.QueuePlayer:input_type -> sistema.PlayerInfoRequest
	2,  // 26: sistema.Matchmaker.GetPlayerStatus:input_type -> sistema.PlayerStatusRequest
	4,  // 27: sistema.Matchmaker.SincronizarReloj:input_type -> sistema.SincronizacionRequest
	9,  // 28: sistema.PartidaService.AssignMatch:input_type -> sistema.AssignMatchRequest
	11, // 29: sistema.PartidaService.ObtenerEstadoPartida:input_type -> sistema.EstadoPartidaRequest
	13, // 30: sistema.MatchmakerService.UpdateServerStatus:input_type -> sistema.ServerStatusUpdateRequest
	15, // 31: sistema.MatchmakerService.NotifyMatchResult:input_type -> sistema.MatchResultNotification
	17, // 32: sistema.AdminService.AdminGetSystemStatus:input_type -> sistema.AdminRequest
	21, // 33: sistema.AdminService.AdminUpdateServerState:input_type -> sistema.AdminServerUpdateRequest
	1,  // 34: sistema.Matchmaker.QueuePlayer:output_type -> sistema.QueuePlayerResponse
	3,  // 35: sistema.Matchmaker.GetPlayerStatus:output_type -> sistema.PlayerStatusResponse
	5,  // 36: sistema.Matchmaker.SincronizarReloj:output_type -> sistema.SincronizacionResponse
	10, // 37: sistema.PartidaService.AssignMatch:output_type -> sistema.AssignMatchResponse
	12, // 38: sistema.PartidaService.ObtenerEstadoPartida:output_type -> sistema.EstadoPartidaResponse
	14, // 39: sistema.MatchmakerService.UpdateServerStatus:output_type -> sistema.ServerStatusUpdateResponse
	16, // 40: sistema.MatchmakerService.NotifyMatchResult:output_type -> sistema.MatchResultResponse
	18, // 41: sistema.AdminService.AdminGetSystemStatus:output_type -> sistema.SystemStatusResponse
	22, // 42: sistema.AdminService.AdminUpdateServerState:output_type -> sistema.AdminUpdateResponse
	34, // [34:43] is the sub-list for method output_type
	25, // [25:34] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_sistema_proto_init() }
func file_sistema_proto_init() {
	if File_sistema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sistema_proto_rawDesc), len(file_sistema_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_sistema_proto_goTypes,
		DependencyIndexes: file_sistema_proto_depIdxs,
		MessageInfos:      file_sistema_proto_msgTypes,
	}.Build()
	File_sistema_proto = out.File
	file_sistema_proto_goTypes = nil
	file_sistema_proto_depIdxs = nil
}
